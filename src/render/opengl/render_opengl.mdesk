////////////////////////////////
//~ dmylo: UI Rectangle Shaders

@embed_string r_ogl_g_rect_common_src:
"""
#version 330 core
#define float2   vec2
#define float3   vec3
#define float4   vec4
#define float3x3 mat3
#define float4x4 mat4

layout (std140) uniform Globals
{
  float2 viewport_size_px;
  float opacity;
  float _padding;

  float4x4 texture_sample_channel_map;

  float2 texture_t2d_size_px;
  float  _padding1;
  float  _padding2;

  mat4x4 xform;

  float2 xform_scale;
  float  _padding3;
  float  _padding4;
};
"""

@embed_string r_ogl_g_rect_vs_src:
"""
layout (location=0) in float4 a_dst_rect_px;
layout (location=1) in float4 a_src_rect_px;
layout (location=2) in float4 a_color00;
layout (location=3) in float4 a_color01;
layout (location=4) in float4 a_color10;
layout (location=5) in float4 a_color11;
layout (location=6) in float4 a_corner_radii_px;
layout (location=7) in float4 a_style_params;

out Vertex2Pixel
{
  flat float2 rect_half_size_px;
  float2 texcoord_pct;
  float2 sdf_sample_pos;
  float4 tint;
  float corner_radius_px;
  flat float border_thickness_px;
  flat float softness_px;
  flat float omit_texture;
} vertex2pixel;

void main()
{
  //- rjf: unpack & xform rectangle src/dst vertices
  float2 dst_p0_px  = a_dst_rect_px.xy;
  float2 dst_p1_px  = a_dst_rect_px.zw;
  float2 src_p0_px  = a_src_rect_px.xy;
  float2 src_p1_px  = a_src_rect_px.zw;
  float2 dst_size_px = abs(dst_p1_px - dst_p0_px);

  //- rjf: unpack style params
  float border_thickness_px = a_style_params.x;
  float softness_px         = a_style_params.y;
  float omit_texture        = a_style_params.z;

  //- rjf: prep per-vertex arrays to sample from (p: position, t: texcoord, c: colorcoord, r: cornerradius)
  float2 dst_p_verts_px[4];
  dst_p_verts_px[0] = float2(dst_p0_px.x, dst_p1_px.y);
  dst_p_verts_px[1] = float2(dst_p0_px.x, dst_p0_px.y);
  dst_p_verts_px[2] = float2(dst_p1_px.x, dst_p1_px.y);
  dst_p_verts_px[3] = float2(dst_p1_px.x, dst_p0_px.y);

  float2 src_p_verts_px[4];
  src_p_verts_px[0] = float2(src_p0_px.x, src_p1_px.y);
  src_p_verts_px[1] = float2(src_p0_px.x, src_p0_px.y);
  src_p_verts_px[2] = float2(src_p1_px.x, src_p1_px.y);
  src_p_verts_px[3] = float2(src_p1_px.x, src_p0_px.y);

  float dst_r_verts_px[4] = float[](
    a_corner_radii_px.y,
    a_corner_radii_px.x,
    a_corner_radii_px.w,
    a_corner_radii_px.z
  );

  float4 src_color[4];
  src_color[0] = a_color01;
  src_color[1] = a_color00;
  src_color[2] = a_color11;
  src_color[3] = a_color10;

  int vertex_id = gl_VertexID;
  float2 dst_verts_pct = float2((vertex_id >> 1) != 0 ? 1.f : 0.f,
                                (vertex_id & 1) != 0 ? 0.f : 1.f);

  // rjf: fill vertex -> pixel data
  {
    float2 xformed_pos = (transpose(xform) * float4(dst_p_verts_px[vertex_id], 1.f, 0.0f)).xy;
    xformed_pos.y = viewport_size_px.y - xformed_pos.y;
    gl_Position.xy                    = 2.f * xformed_pos/viewport_size_px - 1.f;
    gl_Position.z                     = 0.f;
    gl_Position.w                     = 1.f;
    vertex2pixel.rect_half_size_px    = dst_size_px / 2.f * xform_scale;
    vertex2pixel.texcoord_pct         = src_p_verts_px[vertex_id] / texture_t2d_size_px;
    vertex2pixel.sdf_sample_pos       = (2.f * dst_verts_pct - 1.f) * vertex2pixel.rect_half_size_px;
    vertex2pixel.tint                 = src_color[vertex_id];
    vertex2pixel.corner_radius_px     = dst_r_verts_px[vertex_id];
    vertex2pixel.border_thickness_px  = border_thickness_px;
    vertex2pixel.softness_px          = softness_px;
    vertex2pixel.omit_texture         = omit_texture;
  }
}
"""

@embed_string r_ogl_g_rect_fs_src:
"""
in Vertex2Pixel
{
  flat float2 rect_half_size_px;
  float2 texcoord_pct;
  float2 sdf_sample_pos;
  float4 tint;
  float corner_radius_px;
  flat float border_thickness_px;
  flat float softness_px;
  flat float omit_texture;
} vertex2pixel;

out float4 o_final_color;

uniform sampler2D main_t2d;

float rect_sdf(float2 sample_pos, float2 rect_half_size, float r)
{
  return length(max(abs(sample_pos) - rect_half_size + r, 0.0)) - r;
}

void main()
{
  // rjf: blend corner colors to produce final tint
  float4 tint = vertex2pixel.tint;

  // rjf: sample texture
  float4 albedo_sample = float4(1, 1, 1, 1);
  if(vertex2pixel.omit_texture < 1)
  {
    albedo_sample = texture(main_t2d, vertex2pixel.texcoord_pct) * transpose(texture_sample_channel_map);
  }

  // rjf: determine SDF sample position
  float2 sdf_sample_pos = vertex2pixel.sdf_sample_pos;

  // rjf: sample for borders
  float border_sdf_t = 1;
  if(vertex2pixel.border_thickness_px > 0)
  {
    float border_sdf_s = rect_sdf(sdf_sample_pos,
                                  vertex2pixel.rect_half_size_px - float2(vertex2pixel.softness_px*2.f, vertex2pixel.softness_px*2.f) - vertex2pixel.border_thickness_px,
                                  max(vertex2pixel.corner_radius_px-vertex2pixel.border_thickness_px, 0));
    border_sdf_t = smoothstep(0, 2*vertex2pixel.softness_px, border_sdf_s);
  }
  if(border_sdf_t < 0.001f)
  {
    discard;
  }

  // rjf: sample for corners
  float corner_sdf_t = 1;
  if(vertex2pixel.corner_radius_px > 0 || vertex2pixel.softness_px > 0.75f)
  {
    float corner_sdf_s = rect_sdf(sdf_sample_pos,
                                  vertex2pixel.rect_half_size_px - float2(vertex2pixel.softness_px*2.f, vertex2pixel.softness_px*2.f),
                                  vertex2pixel.corner_radius_px);
    corner_sdf_t = 1-smoothstep(0, 2*vertex2pixel.softness_px, corner_sdf_s);
  }

  // rjf: form+return final color
  o_final_color = albedo_sample;
  o_final_color *= tint;
  o_final_color.a *= opacity;
  o_final_color.a *= corner_sdf_t;
  o_final_color.a *= border_sdf_t;
}
"""
