// Copyright (c) 2024 Epic Games Tools
// Licensed under the MIT license (https://opensource.org/license/mit/)

//- GENERATED CODE

#ifndef RENDER_OPENGL_META_H
#define RENDER_OPENGL_META_H

C_LINKAGE_BEGIN
read_only global String8 r_ogl_g_rect_common_src =
str8_lit_comp(
""
"\n"
"#version 330 core\n"
"#define float2   vec2\n"
"#define float3   vec3\n"
"#define float4   vec4\n"
"#define float3x3 mat3\n"
"#define float4x4 mat4\n"
"\n"
"layout (std140) uniform Globals\n"
"{\n"
"  float2 viewport_size_px;\n"
"  float opacity;\n"
"  float _padding;\n"
"\n"
"  float4x4 texture_sample_channel_map;\n"
"\n"
"  float2 texture_t2d_size_px;\n"
"  float  _padding1;\n"
"  float  _padding2;\n"
"\n"
"  mat4x4 xform;\n"
"\n"
"  float2 xform_scale;\n"
"  float  _padding3;\n"
"  float  _padding4;\n"
"};\n"
""
);

read_only global String8 r_ogl_g_rect_vs_src =
str8_lit_comp(
""
"\n"
"layout (location=0) in float4 a_dst_rect_px;\n"
"layout (location=1) in float4 a_src_rect_px;\n"
"layout (location=2) in float4 a_color00;\n"
"layout (location=3) in float4 a_color01;\n"
"layout (location=4) in float4 a_color10;\n"
"layout (location=5) in float4 a_color11;\n"
"layout (location=6) in float4 a_corner_radii_px;\n"
"layout (location=7) in float4 a_style_params;\n"
"\n"
"out Vertex2Pixel\n"
"{\n"
"  flat float2 rect_half_size_px;\n"
"  float2 texcoord_pct;\n"
"  float2 sdf_sample_pos;\n"
"  float4 tint;\n"
"  float corner_radius_px;\n"
"  flat float border_thickness_px;\n"
"  flat float softness_px;\n"
"  flat float omit_texture;\n"
"} vertex2pixel;\n"
"\n"
"void main()\n"
"{\n"
"  //- rjf: unpack & xform rectangle src/dst vertices\n"
"  float2 dst_p0_px  = a_dst_rect_px.xy;\n"
"  float2 dst_p1_px  = a_dst_rect_px.zw;\n"
"  float2 src_p0_px  = a_src_rect_px.xy;\n"
"  float2 src_p1_px  = a_src_rect_px.zw;\n"
"  float2 dst_size_px = abs(dst_p1_px - dst_p0_px);\n"
"\n"
"  //- rjf: unpack style params\n"
"  float border_thickness_px = a_style_params.x;\n"
"  float softness_px         = a_style_params.y;\n"
"  float omit_texture        = a_style_params.z;\n"
"\n"
"  //- rjf: prep per-vertex arrays to sample from (p: position, t: texcoord, c: colorcoord, r: cornerradius)\n"
"  float2 dst_p_verts_px[4];\n"
"  dst_p_verts_px[0] = float2(dst_p0_px.x, dst_p1_px.y);\n"
"  dst_p_verts_px[1] = float2(dst_p0_px.x, dst_p0_px.y);\n"
"  dst_p_verts_px[2] = float2(dst_p1_px.x, dst_p1_px.y);\n"
"  dst_p_verts_px[3] = float2(dst_p1_px.x, dst_p0_px.y);\n"
"\n"
"  float2 src_p_verts_px[4];\n"
"  src_p_verts_px[0] = float2(src_p0_px.x, src_p1_px.y);\n"
"  src_p_verts_px[1] = float2(src_p0_px.x, src_p0_px.y);\n"
"  src_p_verts_px[2] = float2(src_p1_px.x, src_p1_px.y);\n"
"  src_p_verts_px[3] = float2(src_p1_px.x, src_p0_px.y);\n"
"\n"
"  float dst_r_verts_px[4] = float[](\n"
"    a_corner_radii_px.y,\n"
"    a_corner_radii_px.x,\n"
"    a_corner_radii_px.w,\n"
"    a_corner_radii_px.z\n"
"  );\n"
"\n"
"  float4 src_color[4];\n"
"  src_color[0] = a_color01;\n"
"  src_color[1] = a_color00;\n"
"  src_color[2] = a_color11;\n"
"  src_color[3] = a_color10;\n"
"\n"
"  int vertex_id = gl_VertexID;\n"
"  float2 dst_verts_pct = float2((vertex_id >> 1) != 0 ? 1.f : 0.f,\n"
"                                (vertex_id & 1) != 0 ? 0.f : 1.f);\n"
"\n"
"  // rjf: fill vertex -> pixel data\n"
"  {\n"
"    float2 xformed_pos = (transpose(xform) * float4(dst_p_verts_px[vertex_id], 1.f, 0.0f)).xy;\n"
"    xformed_pos.y = viewport_size_px.y - xformed_pos.y;\n"
"    gl_Position.xy                    = 2.f * xformed_pos/viewport_size_px - 1.f;\n"
"    gl_Position.z                     = 0.f;\n"
"    gl_Position.w                     = 1.f;\n"
"    vertex2pixel.rect_half_size_px    = dst_size_px / 2.f * xform_scale;\n"
"    vertex2pixel.texcoord_pct         = src_p_verts_px[vertex_id] / texture_t2d_size_px;\n"
"    vertex2pixel.sdf_sample_pos       = (2.f * dst_verts_pct - 1.f) * vertex2pixel.rect_half_size_px;\n"
"    vertex2pixel.tint                 = src_color[vertex_id];\n"
"    vertex2pixel.corner_radius_px     = dst_r_verts_px[vertex_id];\n"
"    vertex2pixel.border_thickness_px  = border_thickness_px;\n"
"    vertex2pixel.softness_px          = softness_px;\n"
"    vertex2pixel.omit_texture         = omit_texture;\n"
"  }\n"
"}\n"
""
);

read_only global String8 r_ogl_g_rect_fs_src =
str8_lit_comp(
""
"\n"
"in Vertex2Pixel\n"
"{\n"
"  flat float2 rect_half_size_px;\n"
"  float2 texcoord_pct;\n"
"  float2 sdf_sample_pos;\n"
"  float4 tint;\n"
"  float corner_radius_px;\n"
"  flat float border_thickness_px;\n"
"  flat float softness_px;\n"
"  flat float omit_texture;\n"
"} vertex2pixel;\n"
"\n"
"out float4 o_final_color;\n"
"\n"
"uniform sampler2D main_t2d;\n"
"\n"
"float rect_sdf(float2 sample_pos, float2 rect_half_size, float r)\n"
"{\n"
"  return length(max(abs(sample_pos) - rect_half_size + r, 0.0)) - r;\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"  // rjf: blend corner colors to produce final tint\n"
"  float4 tint = vertex2pixel.tint;\n"
"\n"
"  // rjf: sample texture\n"
"  float4 albedo_sample = float4(1, 1, 1, 1);\n"
"  if(vertex2pixel.omit_texture < 1)\n"
"  {\n"
"    albedo_sample = texture(main_t2d, vertex2pixel.texcoord_pct) * transpose(texture_sample_channel_map);\n"
"  }\n"
"\n"
"  // rjf: determine SDF sample position\n"
"  float2 sdf_sample_pos = vertex2pixel.sdf_sample_pos;\n"
"\n"
"  // rjf: sample for borders\n"
"  float border_sdf_t = 1;\n"
"  if(vertex2pixel.border_thickness_px > 0)\n"
"  {\n"
"    float border_sdf_s = rect_sdf(sdf_sample_pos,\n"
"                                  vertex2pixel.rect_half_size_px - float2(vertex2pixel.softness_px*2.f, vertex2pixel.softness_px*2.f) - vertex2pixel.border_thickness_px,\n"
"                                  max(vertex2pixel.corner_radius_px-vertex2pixel.border_thickness_px, 0));\n"
"    border_sdf_t = smoothstep(0, 2*vertex2pixel.softness_px, border_sdf_s);\n"
"  }\n"
"  if(border_sdf_t < 0.001f)\n"
"  {\n"
"    discard;\n"
"  }\n"
"\n"
"  // rjf: sample for corners\n"
"  float corner_sdf_t = 1;\n"
"  if(vertex2pixel.corner_radius_px > 0 || vertex2pixel.softness_px > 0.75f)\n"
"  {\n"
"    float corner_sdf_s = rect_sdf(sdf_sample_pos,\n"
"                                  vertex2pixel.rect_half_size_px - float2(vertex2pixel.softness_px*2.f, vertex2pixel.softness_px*2.f),\n"
"                                  vertex2pixel.corner_radius_px);\n"
"    corner_sdf_t = 1-smoothstep(0, 2*vertex2pixel.softness_px, corner_sdf_s);\n"
"  }\n"
"\n"
"  // rjf: form+return final color\n"
"  o_final_color = albedo_sample;\n"
"  o_final_color *= tint;\n"
"  o_final_color.a *= opacity;\n"
"  o_final_color.a *= corner_sdf_t;\n"
"  o_final_color.a *= border_sdf_t;\n"
"}\n"
""
);

C_LINKAGE_END

#endif // RENDER_OPENGL_META_H
